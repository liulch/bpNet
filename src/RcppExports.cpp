// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// GenAY
arma::mat GenAY(arma::cube W, arma::mat Y, arma::mat Rho);
RcppExport SEXP _bpNet_GenAY(SEXP WSEXP, SEXP YSEXP, SEXP RhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Rho(RhoSEXP);
    rcpp_result_gen = Rcpp::wrap(GenAY(W, Y, Rho));
    return rcpp_result_gen;
END_RCPP
}
// rhofit
arma::mat rhofit(arma::mat WY, arma::mat Rho);
RcppExport SEXP _bpNet_rhofit(SEXP WYSEXP, SEXP RhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type WY(WYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Rho(RhoSEXP);
    rcpp_result_gen = Rcpp::wrap(rhofit(WY, Rho));
    return rcpp_result_gen;
END_RCPP
}
// Xfit
arma::mat Xfit(arma::cube X, arma::mat beta);
RcppExport SEXP _bpNet_Xfit(SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(Xfit(X, beta));
    return rcpp_result_gen;
END_RCPP
}
// Zfit
arma::mat Zfit(arma::cube Z, arma::mat Alpha);
RcppExport SEXP _bpNet_Zfit(SEXP ZSEXP, SEXP AlphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Alpha(AlphaSEXP);
    rcpp_result_gen = Rcpp::wrap(Zfit(Z, Alpha));
    return rcpp_result_gen;
END_RCPP
}
// Afit
arma::mat Afit(arma::cube A, arma::mat Alpha);
RcppExport SEXP _bpNet_Afit(SEXP ASEXP, SEXP AlphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Alpha(AlphaSEXP);
    rcpp_result_gen = Rcpp::wrap(Afit(A, Alpha));
    return rcpp_result_gen;
END_RCPP
}
// genB1
arma::mat genB1(arma::cube X, arma::mat invB0, double sigma2);
RcppExport SEXP _bpNet_genB1(SEXP XSEXP, SEXP invB0SEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invB0(invB0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(genB1(X, invB0, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// genb1
arma::mat genb1(arma::cube X, arma::mat Y, arma::mat invB0, arma::mat B1, arma::mat b0, double sigma2);
RcppExport SEXP _bpNet_genb1(SEXP XSEXP, SEXP YSEXP, SEXP invB0SEXP, SEXP B1SEXP, SEXP b0SEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invB0(invB0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B1(B1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(genb1(X, Y, invB0, B1, b0, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// sampleBeta
arma::mat sampleBeta(arma::cube X, arma::mat Y, arma::mat B0, arma::mat b0, double sigma2);
RcppExport SEXP _bpNet_sampleBeta(SEXP XSEXP, SEXP YSEXP, SEXP B0SEXP, SEXP b0SEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B0(B0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(sampleBeta(X, Y, B0, b0, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// genA1
arma::mat genA1(arma::mat X, arma::mat invA0, double sigma2);
RcppExport SEXP _bpNet_genA1(SEXP XSEXP, SEXP invA0SEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invA0(invA0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(genA1(X, invA0, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// gena1
arma::mat gena1(arma::mat X, arma::mat Y, arma::mat A1, double sigma2);
RcppExport SEXP _bpNet_gena1(SEXP XSEXP, SEXP YSEXP, SEXP A1SEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(gena1(X, Y, A1, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// sampleCN
arma::mat sampleCN(arma::mat M, arma::mat S, arma::mat m);
RcppExport SEXP _bpNet_sampleCN(SEXP MSEXP, SEXP SSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleCN(M, S, m));
    return rcpp_result_gen;
END_RCPP
}
// sampleVector
arma::mat sampleVector(arma::mat M, arma::mat S, int id, int r);
RcppExport SEXP _bpNet_sampleVector(SEXP MSEXP, SEXP SSEXP, SEXP idSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleVector(M, S, id, r));
    return rcpp_result_gen;
END_RCPP
}
// sampleSubAlpha
arma::mat sampleSubAlpha(arma::mat X, arma::mat Y, arma::mat A0, int unit, int id, int r, double sigma2);
RcppExport SEXP _bpNet_sampleSubAlpha(SEXP XSEXP, SEXP YSEXP, SEXP A0SEXP, SEXP unitSEXP, SEXP idSEXP, SEXP rSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(sampleSubAlpha(X, Y, A0, unit, id, r, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// sampleAlpha
arma::mat sampleAlpha(arma::cube X, arma::mat Y, arma::mat A0, int unit, int r, double sigma2);
RcppExport SEXP _bpNet_sampleAlpha(SEXP XSEXP, SEXP YSEXP, SEXP A0SEXP, SEXP unitSEXP, SEXP rSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(sampleAlpha(X, Y, A0, unit, r, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// genD1
arma::mat genD1(arma::mat D0, arma::mat coef);
RcppExport SEXP _bpNet_genD1(SEXP D0SEXP, SEXP coefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type D0(D0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type coef(coefSEXP);
    rcpp_result_gen = Rcpp::wrap(genD1(D0, coef));
    return rcpp_result_gen;
END_RCPP
}
// sampleD
arma::mat sampleD(arma::mat D0, arma::mat coef, double d0);
RcppExport SEXP _bpNet_sampleD(SEXP D0SEXP, SEXP coefSEXP, SEXP d0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type D0(D0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< double >::type d0(d0SEXP);
    rcpp_result_gen = Rcpp::wrap(sampleD(D0, coef, d0));
    return rcpp_result_gen;
END_RCPP
}
// genPhi0
double genPhi0(arma::mat WY, double sigma2);
RcppExport SEXP _bpNet_genPhi0(SEXP WYSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type WY(WYSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(genPhi0(WY, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// genphi0
double genphi0(arma::mat WY, arma::mat res, double Phi0, double sigma2);
RcppExport SEXP _bpNet_genphi0(SEXP WYSEXP, SEXP resSEXP, SEXP Phi0SEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type WY(WYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< double >::type Phi0(Phi0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(genphi0(WY, res, Phi0, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// samplesRho0
double samplesRho0(arma::mat WY, arma::mat res, arma::mat lambda, double sigma2);
RcppExport SEXP _bpNet_samplesRho0(SEXP WYSEXP, SEXP resSEXP, SEXP lambdaSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type WY(WYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(samplesRho0(WY, res, lambda, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// abvalue0
double abvalue0(arma::mat WY, arma::mat res, arma::mat lambda, double rho, double sigma2);
RcppExport SEXP _bpNet_abvalue0(SEXP WYSEXP, SEXP resSEXP, SEXP lambdaSEXP, SEXP rhoSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type WY(WYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(abvalue0(WY, res, lambda, rho, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// sampleRho0
double sampleRho0(arma::mat WY, arma::mat res, arma::mat lambda, double rho0, double rho1, double sigma2);
RcppExport SEXP _bpNet_sampleRho0(SEXP WYSEXP, SEXP resSEXP, SEXP lambdaSEXP, SEXP rho0SEXP, SEXP rho1SEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type WY(WYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type rho0(rho0SEXP);
    Rcpp::traits::input_parameter< double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(sampleRho0(WY, res, lambda, rho0, rho1, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// genPhi
double genPhi(arma::mat wy, int type, int time, int T, double kappa, double sigma2, double sigma_n2);
RcppExport SEXP _bpNet_genPhi(SEXP wySEXP, SEXP typeSEXP, SEXP timeSEXP, SEXP TSEXP, SEXP kappaSEXP, SEXP sigma2SEXP, SEXP sigma_n2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type wy(wySEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_n2(sigma_n2SEXP);
    rcpp_result_gen = Rcpp::wrap(genPhi(wy, type, time, T, kappa, sigma2, sigma_n2));
    return rcpp_result_gen;
END_RCPP
}
// genphi
double genphi(arma::mat wy, arma::mat res, arma::mat Rho_old, arma::mat Rho_new, arma::mat rhoZ, arma::mat rhoA, int type, int time, int T, double kappa, double Phi, double sigma2, double sigma_n2);
RcppExport SEXP _bpNet_genphi(SEXP wySEXP, SEXP resSEXP, SEXP Rho_oldSEXP, SEXP Rho_newSEXP, SEXP rhoZSEXP, SEXP rhoASEXP, SEXP typeSEXP, SEXP timeSEXP, SEXP TSEXP, SEXP kappaSEXP, SEXP PhiSEXP, SEXP sigma2SEXP, SEXP sigma_n2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type wy(wySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Rho_old(Rho_oldSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Rho_new(Rho_newSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rhoZ(rhoZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rhoA(rhoASEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_n2(sigma_n2SEXP);
    rcpp_result_gen = Rcpp::wrap(genphi(wy, res, Rho_old, Rho_new, rhoZ, rhoA, type, time, T, kappa, Phi, sigma2, sigma_n2));
    return rcpp_result_gen;
END_RCPP
}
// sampleSubRho
double sampleSubRho(arma::mat wy, arma::mat res, arma::mat lambda, arma::mat Rho_old, arma::mat Rho_new, arma::mat rhoZ, arma::mat rhoA, int type, int time, int T, double kappa, double sigma2, double sigma_n2);
RcppExport SEXP _bpNet_sampleSubRho(SEXP wySEXP, SEXP resSEXP, SEXP lambdaSEXP, SEXP Rho_oldSEXP, SEXP Rho_newSEXP, SEXP rhoZSEXP, SEXP rhoASEXP, SEXP typeSEXP, SEXP timeSEXP, SEXP TSEXP, SEXP kappaSEXP, SEXP sigma2SEXP, SEXP sigma_n2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type wy(wySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Rho_old(Rho_oldSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Rho_new(Rho_newSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rhoZ(rhoZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rhoA(rhoASEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_n2(sigma_n2SEXP);
    rcpp_result_gen = Rcpp::wrap(sampleSubRho(wy, res, lambda, Rho_old, Rho_new, rhoZ, rhoA, type, time, T, kappa, sigma2, sigma_n2));
    return rcpp_result_gen;
END_RCPP
}
// abvalue
double abvalue(arma::mat WY, arma::mat res, arma::mat Rho_old, arma::mat Rho_new, arma::mat lambda, arma::mat rhoZ, arma::mat rhoA, int type, int time, int T, double rho, double kappa, double sigma2, double sigma_n2);
RcppExport SEXP _bpNet_abvalue(SEXP WYSEXP, SEXP resSEXP, SEXP Rho_oldSEXP, SEXP Rho_newSEXP, SEXP lambdaSEXP, SEXP rhoZSEXP, SEXP rhoASEXP, SEXP typeSEXP, SEXP timeSEXP, SEXP TSEXP, SEXP rhoSEXP, SEXP kappaSEXP, SEXP sigma2SEXP, SEXP sigma_n2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type WY(WYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Rho_old(Rho_oldSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Rho_new(Rho_newSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rhoZ(rhoZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rhoA(rhoASEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_n2(sigma_n2SEXP);
    rcpp_result_gen = Rcpp::wrap(abvalue(WY, res, Rho_old, Rho_new, lambda, rhoZ, rhoA, type, time, T, rho, kappa, sigma2, sigma_n2));
    return rcpp_result_gen;
END_RCPP
}
// sampleRho
arma::mat sampleRho(arma::mat WY, arma::mat res, arma::mat Rho_old, arma::mat lambda, arma::mat rhoZ, arma::mat rhoA, int type, double kappa, double sigma2, double sigma_n2);
RcppExport SEXP _bpNet_sampleRho(SEXP WYSEXP, SEXP resSEXP, SEXP Rho_oldSEXP, SEXP lambdaSEXP, SEXP rhoZSEXP, SEXP rhoASEXP, SEXP typeSEXP, SEXP kappaSEXP, SEXP sigma2SEXP, SEXP sigma_n2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type WY(WYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Rho_old(Rho_oldSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rhoZ(rhoZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rhoA(rhoASEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_n2(sigma_n2SEXP);
    rcpp_result_gen = Rcpp::wrap(sampleRho(WY, res, Rho_old, lambda, rhoZ, rhoA, type, kappa, sigma2, sigma_n2));
    return rcpp_result_gen;
END_RCPP
}
// sampleRhoA
arma::mat sampleRhoA(arma::mat Rho, arma::mat rhoZ, arma::mat RA0, arma::mat ra0, int type, double kappa, double sigma_n2);
RcppExport SEXP _bpNet_sampleRhoA(SEXP RhoSEXP, SEXP rhoZSEXP, SEXP RA0SEXP, SEXP ra0SEXP, SEXP typeSEXP, SEXP kappaSEXP, SEXP sigma_n2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Rho(RhoSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rhoZ(rhoZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RA0(RA0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ra0(ra0SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_n2(sigma_n2SEXP);
    rcpp_result_gen = Rcpp::wrap(sampleRhoA(Rho, rhoZ, RA0, ra0, type, kappa, sigma_n2));
    return rcpp_result_gen;
END_RCPP
}
// sampleKappa
double sampleKappa(arma::mat Rho, arma::mat rhoZ, arma::mat rhoA, double sigma_n2);
RcppExport SEXP _bpNet_sampleKappa(SEXP RhoSEXP, SEXP rhoZSEXP, SEXP rhoASEXP, SEXP sigma_n2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Rho(RhoSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rhoZ(rhoZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rhoA(rhoASEXP);
    Rcpp::traits::input_parameter< double >::type sigma_n2(sigma_n2SEXP);
    rcpp_result_gen = Rcpp::wrap(sampleKappa(Rho, rhoZ, rhoA, sigma_n2));
    return rcpp_result_gen;
END_RCPP
}
// sampleSigman2
double sampleSigman2(arma::mat Rho, arma::mat rhoZ, arma::mat rhoA, int type, double kappa);
RcppExport SEXP _bpNet_sampleSigman2(SEXP RhoSEXP, SEXP rhoZSEXP, SEXP rhoASEXP, SEXP typeSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Rho(RhoSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rhoZ(rhoZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rhoA(rhoASEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleSigman2(Rho, rhoZ, rhoA, type, kappa));
    return rcpp_result_gen;
END_RCPP
}
// sampleSigma2
double sampleSigma2(arma::mat res);
RcppExport SEXP _bpNet_sampleSigma2(SEXP resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleSigma2(res));
    return rcpp_result_gen;
END_RCPP
}
// genBi
arma::mat genBi(int k);
RcppExport SEXP _bpNet_genBi(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(genBi(k));
    return rcpp_result_gen;
END_RCPP
}
// permute
List permute(arma::mat omega, arma::mat xi);
RcppExport SEXP _bpNet_permute(SEXP omegaSEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xi(xiSEXP);
    rcpp_result_gen = Rcpp::wrap(permute(omega, xi));
    return rcpp_result_gen;
END_RCPP
}
// sampleG
double sampleG(double a, double b);
RcppExport SEXP _bpNet_sampleG(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleG(a, b));
    return rcpp_result_gen;
END_RCPP
}
// rrinvgauss
double rrinvgauss(double mu, double lambda);
RcppExport SEXP _bpNet_rrinvgauss(SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rrinvgauss(mu, lambda));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bpNet_GenAY", (DL_FUNC) &_bpNet_GenAY, 3},
    {"_bpNet_rhofit", (DL_FUNC) &_bpNet_rhofit, 2},
    {"_bpNet_Xfit", (DL_FUNC) &_bpNet_Xfit, 2},
    {"_bpNet_Zfit", (DL_FUNC) &_bpNet_Zfit, 2},
    {"_bpNet_Afit", (DL_FUNC) &_bpNet_Afit, 2},
    {"_bpNet_genB1", (DL_FUNC) &_bpNet_genB1, 3},
    {"_bpNet_genb1", (DL_FUNC) &_bpNet_genb1, 6},
    {"_bpNet_sampleBeta", (DL_FUNC) &_bpNet_sampleBeta, 5},
    {"_bpNet_genA1", (DL_FUNC) &_bpNet_genA1, 3},
    {"_bpNet_gena1", (DL_FUNC) &_bpNet_gena1, 4},
    {"_bpNet_sampleCN", (DL_FUNC) &_bpNet_sampleCN, 3},
    {"_bpNet_sampleVector", (DL_FUNC) &_bpNet_sampleVector, 4},
    {"_bpNet_sampleSubAlpha", (DL_FUNC) &_bpNet_sampleSubAlpha, 7},
    {"_bpNet_sampleAlpha", (DL_FUNC) &_bpNet_sampleAlpha, 6},
    {"_bpNet_genD1", (DL_FUNC) &_bpNet_genD1, 2},
    {"_bpNet_sampleD", (DL_FUNC) &_bpNet_sampleD, 3},
    {"_bpNet_genPhi0", (DL_FUNC) &_bpNet_genPhi0, 2},
    {"_bpNet_genphi0", (DL_FUNC) &_bpNet_genphi0, 4},
    {"_bpNet_samplesRho0", (DL_FUNC) &_bpNet_samplesRho0, 4},
    {"_bpNet_abvalue0", (DL_FUNC) &_bpNet_abvalue0, 5},
    {"_bpNet_sampleRho0", (DL_FUNC) &_bpNet_sampleRho0, 6},
    {"_bpNet_genPhi", (DL_FUNC) &_bpNet_genPhi, 7},
    {"_bpNet_genphi", (DL_FUNC) &_bpNet_genphi, 13},
    {"_bpNet_sampleSubRho", (DL_FUNC) &_bpNet_sampleSubRho, 13},
    {"_bpNet_abvalue", (DL_FUNC) &_bpNet_abvalue, 14},
    {"_bpNet_sampleRho", (DL_FUNC) &_bpNet_sampleRho, 10},
    {"_bpNet_sampleRhoA", (DL_FUNC) &_bpNet_sampleRhoA, 7},
    {"_bpNet_sampleKappa", (DL_FUNC) &_bpNet_sampleKappa, 4},
    {"_bpNet_sampleSigman2", (DL_FUNC) &_bpNet_sampleSigman2, 5},
    {"_bpNet_sampleSigma2", (DL_FUNC) &_bpNet_sampleSigma2, 1},
    {"_bpNet_genBi", (DL_FUNC) &_bpNet_genBi, 1},
    {"_bpNet_permute", (DL_FUNC) &_bpNet_permute, 2},
    {"_bpNet_sampleG", (DL_FUNC) &_bpNet_sampleG, 2},
    {"_bpNet_rrinvgauss", (DL_FUNC) &_bpNet_rrinvgauss, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_bpNet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
